<?php

namespace ZablockiBros\Jetpack\Console;

use Illuminate\Console\GeneratorCommand;
use Illuminate\Support\Composer;
use Illuminate\Support\Str;
use ZablockiBros\Jetpack\Jetpack;
use ZablockiBros\Jetpack\Models\BaseModel;
use ZablockiBros\Jetpack\Models\Columns\Column;

class MakeMigration extends GeneratorCommand
{
    /**
     * The console command signature.
     *
     * @var string
     */
    protected $signature = 'jetpack:migrate {name : The name of the model}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create a new model migration for a definition';

    /**
     * The Composer instance.
     *
     * @var \Illuminate\Support\Composer
     */
    protected $composer;

    /**
     *
     */
    public function handle()
    {
        $this->composer = app(Composer::class);

        parent::handle(); // TODO: Change the autogenerated stub
    }

    /**
     * Build the class with the given name.
     *
     * Remove the base controller import if we are already in base namespace.
     *
     * @param  string  $name
     * @return string
     */
    protected function buildClass($name)
    {
        $replace = [];

        $replace['DummyTable'] = $this->getTableName();

        $replace = $this->buildColumns($replace);

        return str_replace(
            array_keys($replace),
            array_values($replace),
            parent::buildClass($name)
        );
    }

    /**
     * Build the model replacement values.
     *
     * @param  array  $replace
     * @return array
     */
    protected function buildColumns(array $replace)
    {
        $replace['DummyColumns'] = '';

        $columns = $this->baseModel()->columns();

        foreach ($columns as $key => $column) {
            $replace['DummyColumns'] .= $this->buildColumn($column);
        }

        return $replace;
    }

    /**
     * @param \ZablockiBros\Jetpack\Models\Columns\Column $column
     *
     * @return mixed
     */
    protected function buildColumn(Column $column)
    {
        $stub = $this->files->get($this->getColumnStub());

        $attributes = collect($column->definition()->toArray())
            ->except('name', 'type')
            ->map(function ($value, $method) {
                $value = is_string($value) ? "'$value'" : $value;
                return $method.'->('.$value.')';
            });

        $attributes = ! empty($attributes)
            ? "->$attributes;"
            : '';

        $replace = [
            'DummyColumnType'    => $column->definition()->get('type'),
            'DummyColumnName'    => $column->definition()->get('name'),
            'DummyColumnMethods' => $attributes,
        ];

        return str_replace(
            array_keys($replace),
            array_values($replace),
            $stub
        );
    }

    /**
     * @param string $name
     *
     * @return string
     */
    protected function getPath($name)
    {
        return $this->laravel->databasePath().DIRECTORY_SEPARATOR.'migrations'.DIRECTORY_SEPARATOR.now()->timestamp.'_'.$this->getMigrationFileName().'.php';
    }

    /**
     * Get the path to the stubs.
     *
     * @return string
     */
    public function getStub()
    {
        return __DIR__ . '/stubs/database/create.stub';
    }

    /**
     * Get the path to the stubs.
     *
     * @return string
     */
    public function getColumnStub()
    {
        return __DIR__ . '/stubs/database/column.stub';
    }

    /**
     * @return null|\ZablockiBros\Jetpack\Models\BaseModel
     */
    private function baseModel(): ?BaseModel
    {
        return Jetpack::getModel($this->baseClassName());
    }

    /**
     * @return string
     */
    private function baseClassName(): string
    {
        return Str::studly(class_basename($this->getNameInput()));
    }

    /**
     * @return string
     */
    private function getTableName(): string
    {
        return snake_case(str_plural($this->baseClassName()));
    }

    /**
     * @return string
     */
    private function getMigrationClassName(): string
    {
        $class = $this->baseClassName();

        return Str::studly("Create{$class}Table");
    }

    /**
     * @return string
     */
    private function getMigrationFileName(): string
    {
        return snake_case($this->getMigrationClassName());
    }
}
