<?php

namespace DummyNamespace;

use NamespacedDummyUserModel;
use NamespacedDummyModel;
use Illuminate\Auth\Access\HandlesAuthorization;

class DummyClass
{
    use HandlesAuthorization;

    /**
     * Determine whether the user can view the DocDummyModel.
     *
     * @param  \NamespacedDummyUserModel  $user
     * @param  \NamespacedDummyModel  $dummyModel
     * @return mixed
     */
    public function view(DummyUser $user, DummyModel $dummyModel)
    {
        // return $user->hasPermissionTo('view model')
        //    && $dummyModel->isOwnedBy($user);

        return $dummyModel->isOwnedBy($user);
    }

    /**
     * Determine whether the user can create DocDummyPluralModel.
     *
     * @param  \NamespacedDummyUserModel  $user
     * @return mixed
     */
    public function create(DummyUser $user)
    {
        // return $user->hasPermissionTo('create model');

        return true;
    }

    /**
     * Determine whether the user can update the DocDummyModel.
     *
     * @param  \NamespacedDummyUserModel  $user
     * @param  \NamespacedDummyModel  $dummyModel
     * @return mixed
     */
    public function update(DummyUser $user, DummyModel $dummyModel)
    {
        // return $user->hasPermissionTo('update model')
        //    && $dummyModel->isOwnedBy($user);

        return $dummyModel->isOwnedBy($user);
    }

    /**
     * Determine whether the user can delete the DocDummyModel.
     *
     * @param  \NamespacedDummyUserModel  $user
     * @param  \NamespacedDummyModel  $dummyModel
     * @return mixed
     */
    public function delete(DummyUser $user, DummyModel $dummyModel)
    {
        // return $user->hasPermissionTo('delete model')
        //    && $dummyModel->isOwnedBy($user);

        return $dummyModel->isOwnedBy($user);
    }

    /**
     * Determine whether the user can restore the DocDummyModel.
     *
     * @param  \NamespacedDummyUserModel  $user
     * @param  \NamespacedDummyModel  $dummyModel
     * @return mixed
     */
    public function restore(DummyUser $user, DummyModel $dummyModel)
    {
        // return $user->hasPermissionTo('create model')
        //    && $dummyModel->isOwnedBy($user);

        return $dummyModel->isOwnedBy($user);
    }

    /**
     * Determine whether the user can permanently delete the DocDummyModel.
     *
     * @param  \NamespacedDummyUserModel  $user
     * @param  \NamespacedDummyModel  $dummyModel
     * @return mixed
     */
    public function forceDelete(DummyUser $user, DummyModel $dummyModel)
    {
        // return $user->hasPermissionTo('delete model')
        //    && $dummyModel->isOwnedBy($user);

        return $dummyModel->isOwnedBy($user);
    }
}
